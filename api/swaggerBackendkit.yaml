swagger: '2.0'
host: localhost
basePath: /
info:
  title: Woleet backend kit API
  version: 1.0.0
  description: >
    The Woleet backend kit API, as exposed by Woleet backend kit's NodeJS server, allows:
     - **your backend** (and only yours) to sign some data using its bitcoin identity (as generated during backend kit installation)
     - **anyone** to verify that your backend effectively owns its claimed bitcoin address
  contact:
    url: 'https://www.woleet.io/'
    email: contact@woleet.com
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
  - name: signature
    description: Sign some data using the bitcoin identity of your backend
  - name: identity
    description: Prove the bitcoin identity of your backend.
paths:
  /signature:
    get:
      operationId: signature
      summary: Sign some data using the bitcoin identity of your backend.
      tags:
        - signature
      description: >
        Use this endpoint to sign some data using the bitcoin identity of your backend.
          You first need to compute the SHA256 hash of your data (client side) and then provide it in the `hashToSign` parameter.
          The signature produced is the signature of this hash using the bitcoin address provided in the `pubKey` parameter (or by the default bitcoin address of your backend if not set).
          This endpoint is protected by an API token, provided to you at backend kit installation time. However, for security reason, **this endpoint SHOULD NEVER be exposed** outside your backend. To facilitate the isolation of this endpoint, a dedicated port can be specified at installation time.
      parameters:
        - name: pubKey
          in: query
          required: false
          type: string
          description: The bitcoin address to use to sign (or the default bitcoin address of your backend if not set).
        - name: hashToSign
          in: query
          required: true
          type: string
          description: The SHA256 hash that is to be signed (a string formatted like [a-f0-9]{64}).
      security:
        - Bearer: []
      responses:
        '200':
          description: The signature of `hashToSign` is returned.
          schema:
            $ref: '#/definitions/signatureResult'
        '400':
          description: Missing or invalid query parameter
          schema:
            $ref: '#/definitions/error'
        '401':
          description: Missing or bad token
          schema:
            $ref: '#/definitions/error'
        '404':
          description: /signature endpoint is not reachable on this port
          schema:
            $ref: '#/definitions/error'
        '500':
          description: Unexpected server error
          schema:
            $ref: '#/definitions/error'
  /identity:
    get:
      operationId: identity
      summary: Prove the bitcoin identity of your backend.
      tags:
        - identity
      description: >
        This endpoint can be used by anyone wanting to verify the bitcoin identity of your backend.
          Calling this endpoint (that should be accessible publicly) makes your backend sign some random data (built by concatenating the `leftData` parameter provided by the client and the `rightData` parameter provided by your backend) using the bitcoin address provided in the `pubKey` parameter.
          The caller can then verify that the produced signature is valid for the given bitcoin address (which validate the ownership of this address by your backend) and can optionally read the TLS certificate securing this endpoint to get the certified identity of your backend.
      parameters:
        - name: pubKey
          in: query
          required: true
          type: string
          description: The bitcoin address to use to sign.
        - name: leftData
          in: query
          required: true
          type: string
          description: Left part of the random data to sign (should be generated randomly).
      responses:
        '200':
          description: The signature of the concatenation of `leftData` and `rightData` using the bitcoin address `pubKey` is returned.
          schema:
            $ref: '#/definitions/identityResult'
        '400':
          description: Missing or invalid query parameter
          schema:
            $ref: '#/definitions/error'
        '404':
          description: /identity endpoint is not reachable on this port
          schema:
            $ref: '#/definitions/error'
        '500':
          description: Unexpected server error
          schema:
            $ref: '#/definitions/error'
definitions:
  error:
    type: object
    properties:
      error:
        type: object
        properties:
          statusCode:
            type: integer
            description: the statusCode matches the returned http status code
            enum:
              - 400
              - 401
              - 404
              - 500
              - 200
          message:
            type: string
            enum:
              - Bad Request
              - Unauthorized
              - Not Found
              - Internal Server Error
              - Missing 'pubKey' query parameter
              - Missing 'leftData' query parameter
              - Missing 'hashToSign' query parameter
              - Query parameter 'hashToSign' has to be a SHA256 hash (in lowercase)
              - Unhandled public key
              - Bad token
          type:
            type: string
            enum:
              - BadRequestError
              - UnauthorizedError
              - NotFoundError
              - InternalServerError
  signatureResult:
    type: object
    properties:
      pubKey:
        type: string
        description: The bitcoin address used to sign (same as the `pubKey` parameter, if provided).
      signedHash:
        type: string
        description: The hash that is signed (same as the `hashToSign` parameter).
      signature:
        type: string
        description: The signature of `hashToSign` using the bitcoin address `pubKey`.
      identityURL:
        type: string
        description: The public URL of the `/identity` endpoint (ie. the URL that anyone can use to verify the bitcoin identity of your backend).
  identityResult:
    type: object
    properties:
      rightData:
        type: string
        description: The right part of the signed data (generated ramdomly).
      signature:
        type: string
        description: The signature of the concatenation of `leftData` and `rightData` using the bitcoin address `pubKey`.

