/*
Woleet API

Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 

API version: 1.13.0
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package woleetapi

import (
	"encoding/json"
)

// Anchors An array of anchors.
type Anchors struct {
	// Array of anchors matching the search criteria.
	Content []Anchor `json:"content,omitempty"`
	// `true` if this is the first page. 
	First *bool `json:"first,omitempty"`
	// `true` if this is the last page. 
	Last *bool `json:"last,omitempty"`
	// Number of anchors in the retrieved page.
	NumberOfElements *int32 `json:"numberOfElements,omitempty"`
	// Number of anchors per page.
	Size *int32 `json:"size,omitempty"`
	// Index of the retrieved page (from 0).
	Number *int32 `json:"number,omitempty"`
}

// NewAnchors instantiates a new Anchors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnchors() *Anchors {
	this := Anchors{}
	return &this
}

// NewAnchorsWithDefaults instantiates a new Anchors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnchorsWithDefaults() *Anchors {
	this := Anchors{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Anchors) GetContent() []Anchor {
	if o == nil || o.Content == nil {
		var ret []Anchor
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchors) GetContentOk() ([]Anchor, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Anchors) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given []Anchor and assigns it to the Content field.
func (o *Anchors) SetContent(v []Anchor) {
	o.Content = v
}

// GetFirst returns the First field value if set, zero value otherwise.
func (o *Anchors) GetFirst() bool {
	if o == nil || o.First == nil {
		var ret bool
		return ret
	}
	return *o.First
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchors) GetFirstOk() (*bool, bool) {
	if o == nil || o.First == nil {
		return nil, false
	}
	return o.First, true
}

// HasFirst returns a boolean if a field has been set.
func (o *Anchors) HasFirst() bool {
	if o != nil && o.First != nil {
		return true
	}

	return false
}

// SetFirst gets a reference to the given bool and assigns it to the First field.
func (o *Anchors) SetFirst(v bool) {
	o.First = &v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *Anchors) GetLast() bool {
	if o == nil || o.Last == nil {
		var ret bool
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchors) GetLastOk() (*bool, bool) {
	if o == nil || o.Last == nil {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *Anchors) HasLast() bool {
	if o != nil && o.Last != nil {
		return true
	}

	return false
}

// SetLast gets a reference to the given bool and assigns it to the Last field.
func (o *Anchors) SetLast(v bool) {
	o.Last = &v
}

// GetNumberOfElements returns the NumberOfElements field value if set, zero value otherwise.
func (o *Anchors) GetNumberOfElements() int32 {
	if o == nil || o.NumberOfElements == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfElements
}

// GetNumberOfElementsOk returns a tuple with the NumberOfElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchors) GetNumberOfElementsOk() (*int32, bool) {
	if o == nil || o.NumberOfElements == nil {
		return nil, false
	}
	return o.NumberOfElements, true
}

// HasNumberOfElements returns a boolean if a field has been set.
func (o *Anchors) HasNumberOfElements() bool {
	if o != nil && o.NumberOfElements != nil {
		return true
	}

	return false
}

// SetNumberOfElements gets a reference to the given int32 and assigns it to the NumberOfElements field.
func (o *Anchors) SetNumberOfElements(v int32) {
	o.NumberOfElements = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Anchors) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchors) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Anchors) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Anchors) SetSize(v int32) {
	o.Size = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *Anchors) GetNumber() int32 {
	if o == nil || o.Number == nil {
		var ret int32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchors) GetNumberOk() (*int32, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *Anchors) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int32 and assigns it to the Number field.
func (o *Anchors) SetNumber(v int32) {
	o.Number = &v
}

func (o Anchors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.First != nil {
		toSerialize["first"] = o.First
	}
	if o.Last != nil {
		toSerialize["last"] = o.Last
	}
	if o.NumberOfElements != nil {
		toSerialize["numberOfElements"] = o.NumberOfElements
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	return json.Marshal(toSerialize)
}

type NullableAnchors struct {
	value *Anchors
	isSet bool
}

func (v NullableAnchors) Get() *Anchors {
	return v.value
}

func (v *NullableAnchors) Set(val *Anchors) {
	v.value = val
	v.isSet = true
}

func (v NullableAnchors) IsSet() bool {
	return v.isSet
}

func (v *NullableAnchors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnchors(val *Anchors) *NullableAnchors {
	return &NullableAnchors{value: val, isSet: true}
}

func (v NullableAnchors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnchors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


