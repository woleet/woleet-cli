/*
Woleet API

Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 

API version: 1.13.0
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package woleetapi

import (
	"encoding/json"
)

// Anchor struct for Anchor
type Anchor struct {
	// Anchor identifier. It is allocated by the platform, and so must not be provided at creation time.
	Id *string `json:"id,omitempty"`
	// Date of creation (in milliseconds since Unix epoch).
	Created *int64 `json:"created,omitempty"`
	// Date of last modification (in milliseconds since Unix epoch).
	LastModified *int64 `json:"lastModified,omitempty"`
	// Name of the anchor (doesn't need to be unique).
	Name string `json:"name"`
	// SHA256 hash of the data to anchor.<br> The value must be provided as an hexadecimal lowercase string. The hash of the empty file is forbidden.<br> **This property must not be provided when creating a signature anchor: it is automatically set at creation time to the SHA256 hash of the `signature` property provided, meaning that the signature is the actual anchored data.** 
	Hash *string `json:"hash,omitempty"`
	// SHA256 hash of the signed data.<br> The value must be provided as an hexadecimal lowercase string. The hash of the empty file is forbidden.<br> **This property must not be provided when creating a data anchor.** 
	SignedHash *string `json:"signedHash,omitempty"`
	// X500 Distinguished Name representing the signed identity.<br> **This property must not be provided when creating a data anchor.** 
	SignedIdentity *string `json:"signedIdentity,omitempty"`
	// Domain name of the identity server.<br> If set, the domain name of the identity URL must be included in the `signedIssuerDomain` domain name.<br> **This property must not be provided when creating a data anchor.** 
	SignedIssuerDomain *string `json:"signedIssuerDomain,omitempty"`
	// Public key of the signer.<br> **Currently only Bitcoin addresses are supported.**<br> **This property must not be provided when creating a data anchor.** 
	PubKey *string `json:"pubKey,omitempty"`
	// Signature of the `signedHash` property using the public key `pubKey`, or, if any of the `signedIdentity` or `signedIssuerDomain` properties are provided, signature of SHA256(`signedHash` + `signedIdentity` + `signedIssuerDomain`) using the public key `pubKey`.<br> **Only Bitcoin signatures are currently supported.**<br> **This property must not be provided when creating a data anchor.** 
	Signature *string `json:"signature,omitempty"`
	// Web hook of the identity server to use to verify the signer's identity.<br> It is used to verify that the server knows the `pubKey` public key and to get or check the identity of the user owning that key.<br> For proofs of seal, it is also used to verify that the identity server (itself identified by the TLS certificate of the URL) controls the key used to sign (ie. owns the private part of the key pair) by requesting it to sign some random data.<br> Please refer to <a target=\"_blank\" href=\"https://app.swaggerhub.com/apis-docs/Woleet/WoleetIDServerAPI/#/Identity/getIdentity\">Woleet.ID Server documentation</a> for more details. 
	IdentityURL *string `json:"identityURL,omitempty"`
	// If the anchor is a signature anchor, identifier of the signature request. 
	SignatureRequestId *string `json:"signatureRequestId,omitempty"`
	// `true` (or unset) if the anchor is public (ie. discoverable by its `hash` or `signedHash`) or `false` if it must be private (ie. not discoverable). 
	Public *bool `json:"public,omitempty"`
	// `true` if the proof receipt must be sent by email once available, or `false` (or unset) if not. 
	NotifyByEmail *bool `json:"notifyByEmail,omitempty"`
	// Set of tags associated to the anchor. There is no restriction on tag names, except they cannot contain spaces.<br> Tags are aimed at classifying and searching anchors. 
	Tags []string `json:"tags,omitempty"`
	// A set of variables (key/values pairs) to store with the anchor.<br> Values must be of type null, boolean, string or number: nested JSON objects are not allowed. 
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Web hook to be called by the platform whenever the `status` property of the anchor changes.<br> The platform does a POST request on this URL with the anchor as a JSON object in the request body. The domain of the URL must resolve to an external IP address.<br> Verifying the authenticity of the callback can be done by checking the HMAC-SHA1 signature of the request body provided by the platform in the `x-woleet-signature` header.<br> Please refer to <a target=\"_blank\" href=\"https://doc.woleet.io/reference/using-callbacks\">this documentation</a> for more details. 
	CallbackURL *string `json:"callbackURL,omitempty"`
	// Status of the anchor: - WAIT: waiting to be processed by the platform (the proof receipt is not yet available for download) - NEW: waiting to be sent to the blockchain (the proof receipt is not yet available for download) - SENT: sent to the blockchain (the proof receipt is ready to download) - CONFIRMED: confirmed at least 6 times by the blockchain (the proof receipt can be verified) 
	Status *string `json:"status,omitempty"`
	// Proven timestamp of the data (for a data anchor) or of the signature (for a signature anchor).<br> This is the time of the Bitcoin block into which the anchoring process occurred (in milliseconds since Unix epoch).<br> Any data whose SHA256 hash equals this anchor's hash is proven to exist at that time and has not been modified since.<br> This property is set when the first confirmation of the Bitcoin block occurs. Once set, the associated proof receipt can be verified (without having to wait for 6 confirmations). 
	Timestamp *int64 `json:"timestamp,omitempty"`
	// Number of confirmations of the Bitcoin block into which the anchoring process occurred.<br> This property is set when the first confirmation of the Bitcoin block occurs, and removed once the block is confirmed at least 6 times. 
	Confirmations *int32 `json:"confirmations,omitempty"`
	// Identifier of the Bitcoin transaction where the anchoring occurred.
	TxId *string `json:"txId,omitempty"`
}

// NewAnchor instantiates a new Anchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnchor(name string) *Anchor {
	this := Anchor{}
	this.Name = name
	return &this
}

// NewAnchorWithDefaults instantiates a new Anchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnchorWithDefaults() *Anchor {
	this := Anchor{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Anchor) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Anchor) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Anchor) SetId(v string) {
	o.Id = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Anchor) GetCreated() int64 {
	if o == nil || o.Created == nil {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetCreatedOk() (*int64, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Anchor) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *Anchor) SetCreated(v int64) {
	o.Created = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *Anchor) GetLastModified() int64 {
	if o == nil || o.LastModified == nil {
		var ret int64
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetLastModifiedOk() (*int64, bool) {
	if o == nil || o.LastModified == nil {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *Anchor) HasLastModified() bool {
	if o != nil && o.LastModified != nil {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given int64 and assigns it to the LastModified field.
func (o *Anchor) SetLastModified(v int64) {
	o.LastModified = &v
}

// GetName returns the Name field value
func (o *Anchor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Anchor) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Anchor) SetName(v string) {
	o.Name = v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Anchor) GetHash() string {
	if o == nil || o.Hash == nil {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetHashOk() (*string, bool) {
	if o == nil || o.Hash == nil {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Anchor) HasHash() bool {
	if o != nil && o.Hash != nil {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Anchor) SetHash(v string) {
	o.Hash = &v
}

// GetSignedHash returns the SignedHash field value if set, zero value otherwise.
func (o *Anchor) GetSignedHash() string {
	if o == nil || o.SignedHash == nil {
		var ret string
		return ret
	}
	return *o.SignedHash
}

// GetSignedHashOk returns a tuple with the SignedHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetSignedHashOk() (*string, bool) {
	if o == nil || o.SignedHash == nil {
		return nil, false
	}
	return o.SignedHash, true
}

// HasSignedHash returns a boolean if a field has been set.
func (o *Anchor) HasSignedHash() bool {
	if o != nil && o.SignedHash != nil {
		return true
	}

	return false
}

// SetSignedHash gets a reference to the given string and assigns it to the SignedHash field.
func (o *Anchor) SetSignedHash(v string) {
	o.SignedHash = &v
}

// GetSignedIdentity returns the SignedIdentity field value if set, zero value otherwise.
func (o *Anchor) GetSignedIdentity() string {
	if o == nil || o.SignedIdentity == nil {
		var ret string
		return ret
	}
	return *o.SignedIdentity
}

// GetSignedIdentityOk returns a tuple with the SignedIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetSignedIdentityOk() (*string, bool) {
	if o == nil || o.SignedIdentity == nil {
		return nil, false
	}
	return o.SignedIdentity, true
}

// HasSignedIdentity returns a boolean if a field has been set.
func (o *Anchor) HasSignedIdentity() bool {
	if o != nil && o.SignedIdentity != nil {
		return true
	}

	return false
}

// SetSignedIdentity gets a reference to the given string and assigns it to the SignedIdentity field.
func (o *Anchor) SetSignedIdentity(v string) {
	o.SignedIdentity = &v
}

// GetSignedIssuerDomain returns the SignedIssuerDomain field value if set, zero value otherwise.
func (o *Anchor) GetSignedIssuerDomain() string {
	if o == nil || o.SignedIssuerDomain == nil {
		var ret string
		return ret
	}
	return *o.SignedIssuerDomain
}

// GetSignedIssuerDomainOk returns a tuple with the SignedIssuerDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetSignedIssuerDomainOk() (*string, bool) {
	if o == nil || o.SignedIssuerDomain == nil {
		return nil, false
	}
	return o.SignedIssuerDomain, true
}

// HasSignedIssuerDomain returns a boolean if a field has been set.
func (o *Anchor) HasSignedIssuerDomain() bool {
	if o != nil && o.SignedIssuerDomain != nil {
		return true
	}

	return false
}

// SetSignedIssuerDomain gets a reference to the given string and assigns it to the SignedIssuerDomain field.
func (o *Anchor) SetSignedIssuerDomain(v string) {
	o.SignedIssuerDomain = &v
}

// GetPubKey returns the PubKey field value if set, zero value otherwise.
func (o *Anchor) GetPubKey() string {
	if o == nil || o.PubKey == nil {
		var ret string
		return ret
	}
	return *o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetPubKeyOk() (*string, bool) {
	if o == nil || o.PubKey == nil {
		return nil, false
	}
	return o.PubKey, true
}

// HasPubKey returns a boolean if a field has been set.
func (o *Anchor) HasPubKey() bool {
	if o != nil && o.PubKey != nil {
		return true
	}

	return false
}

// SetPubKey gets a reference to the given string and assigns it to the PubKey field.
func (o *Anchor) SetPubKey(v string) {
	o.PubKey = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *Anchor) GetSignature() string {
	if o == nil || o.Signature == nil {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetSignatureOk() (*string, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *Anchor) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *Anchor) SetSignature(v string) {
	o.Signature = &v
}

// GetIdentityURL returns the IdentityURL field value if set, zero value otherwise.
func (o *Anchor) GetIdentityURL() string {
	if o == nil || o.IdentityURL == nil {
		var ret string
		return ret
	}
	return *o.IdentityURL
}

// GetIdentityURLOk returns a tuple with the IdentityURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetIdentityURLOk() (*string, bool) {
	if o == nil || o.IdentityURL == nil {
		return nil, false
	}
	return o.IdentityURL, true
}

// HasIdentityURL returns a boolean if a field has been set.
func (o *Anchor) HasIdentityURL() bool {
	if o != nil && o.IdentityURL != nil {
		return true
	}

	return false
}

// SetIdentityURL gets a reference to the given string and assigns it to the IdentityURL field.
func (o *Anchor) SetIdentityURL(v string) {
	o.IdentityURL = &v
}

// GetSignatureRequestId returns the SignatureRequestId field value if set, zero value otherwise.
func (o *Anchor) GetSignatureRequestId() string {
	if o == nil || o.SignatureRequestId == nil {
		var ret string
		return ret
	}
	return *o.SignatureRequestId
}

// GetSignatureRequestIdOk returns a tuple with the SignatureRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetSignatureRequestIdOk() (*string, bool) {
	if o == nil || o.SignatureRequestId == nil {
		return nil, false
	}
	return o.SignatureRequestId, true
}

// HasSignatureRequestId returns a boolean if a field has been set.
func (o *Anchor) HasSignatureRequestId() bool {
	if o != nil && o.SignatureRequestId != nil {
		return true
	}

	return false
}

// SetSignatureRequestId gets a reference to the given string and assigns it to the SignatureRequestId field.
func (o *Anchor) SetSignatureRequestId(v string) {
	o.SignatureRequestId = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *Anchor) GetPublic() bool {
	if o == nil || o.Public == nil {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetPublicOk() (*bool, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *Anchor) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *Anchor) SetPublic(v bool) {
	o.Public = &v
}

// GetNotifyByEmail returns the NotifyByEmail field value if set, zero value otherwise.
func (o *Anchor) GetNotifyByEmail() bool {
	if o == nil || o.NotifyByEmail == nil {
		var ret bool
		return ret
	}
	return *o.NotifyByEmail
}

// GetNotifyByEmailOk returns a tuple with the NotifyByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetNotifyByEmailOk() (*bool, bool) {
	if o == nil || o.NotifyByEmail == nil {
		return nil, false
	}
	return o.NotifyByEmail, true
}

// HasNotifyByEmail returns a boolean if a field has been set.
func (o *Anchor) HasNotifyByEmail() bool {
	if o != nil && o.NotifyByEmail != nil {
		return true
	}

	return false
}

// SetNotifyByEmail gets a reference to the given bool and assigns it to the NotifyByEmail field.
func (o *Anchor) SetNotifyByEmail(v bool) {
	o.NotifyByEmail = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Anchor) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Anchor) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Anchor) SetTags(v []string) {
	o.Tags = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Anchor) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Anchor) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Anchor) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCallbackURL returns the CallbackURL field value if set, zero value otherwise.
func (o *Anchor) GetCallbackURL() string {
	if o == nil || o.CallbackURL == nil {
		var ret string
		return ret
	}
	return *o.CallbackURL
}

// GetCallbackURLOk returns a tuple with the CallbackURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetCallbackURLOk() (*string, bool) {
	if o == nil || o.CallbackURL == nil {
		return nil, false
	}
	return o.CallbackURL, true
}

// HasCallbackURL returns a boolean if a field has been set.
func (o *Anchor) HasCallbackURL() bool {
	if o != nil && o.CallbackURL != nil {
		return true
	}

	return false
}

// SetCallbackURL gets a reference to the given string and assigns it to the CallbackURL field.
func (o *Anchor) SetCallbackURL(v string) {
	o.CallbackURL = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Anchor) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Anchor) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Anchor) SetStatus(v string) {
	o.Status = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Anchor) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Anchor) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *Anchor) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetConfirmations returns the Confirmations field value if set, zero value otherwise.
func (o *Anchor) GetConfirmations() int32 {
	if o == nil || o.Confirmations == nil {
		var ret int32
		return ret
	}
	return *o.Confirmations
}

// GetConfirmationsOk returns a tuple with the Confirmations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetConfirmationsOk() (*int32, bool) {
	if o == nil || o.Confirmations == nil {
		return nil, false
	}
	return o.Confirmations, true
}

// HasConfirmations returns a boolean if a field has been set.
func (o *Anchor) HasConfirmations() bool {
	if o != nil && o.Confirmations != nil {
		return true
	}

	return false
}

// SetConfirmations gets a reference to the given int32 and assigns it to the Confirmations field.
func (o *Anchor) SetConfirmations(v int32) {
	o.Confirmations = &v
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *Anchor) GetTxId() string {
	if o == nil || o.TxId == nil {
		var ret string
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Anchor) GetTxIdOk() (*string, bool) {
	if o == nil || o.TxId == nil {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *Anchor) HasTxId() bool {
	if o != nil && o.TxId != nil {
		return true
	}

	return false
}

// SetTxId gets a reference to the given string and assigns it to the TxId field.
func (o *Anchor) SetTxId(v string) {
	o.TxId = &v
}

func (o Anchor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.LastModified != nil {
		toSerialize["lastModified"] = o.LastModified
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Hash != nil {
		toSerialize["hash"] = o.Hash
	}
	if o.SignedHash != nil {
		toSerialize["signedHash"] = o.SignedHash
	}
	if o.SignedIdentity != nil {
		toSerialize["signedIdentity"] = o.SignedIdentity
	}
	if o.SignedIssuerDomain != nil {
		toSerialize["signedIssuerDomain"] = o.SignedIssuerDomain
	}
	if o.PubKey != nil {
		toSerialize["pubKey"] = o.PubKey
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	if o.IdentityURL != nil {
		toSerialize["identityURL"] = o.IdentityURL
	}
	if o.SignatureRequestId != nil {
		toSerialize["signatureRequestId"] = o.SignatureRequestId
	}
	if o.Public != nil {
		toSerialize["public"] = o.Public
	}
	if o.NotifyByEmail != nil {
		toSerialize["notifyByEmail"] = o.NotifyByEmail
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.CallbackURL != nil {
		toSerialize["callbackURL"] = o.CallbackURL
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Confirmations != nil {
		toSerialize["confirmations"] = o.Confirmations
	}
	if o.TxId != nil {
		toSerialize["txId"] = o.TxId
	}
	return json.Marshal(toSerialize)
}

type NullableAnchor struct {
	value *Anchor
	isSet bool
}

func (v NullableAnchor) Get() *Anchor {
	return v.value
}

func (v *NullableAnchor) Set(val *Anchor) {
	v.value = val
	v.isSet = true
}

func (v NullableAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnchor(val *Anchor) *NullableAnchor {
	return &NullableAnchor{value: val, isSet: true}
}

func (v NullableAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


