/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
	"fmt"
)

// KeyStatusEnum The status of the key:<br> - `active`: the key is active: it can be used to sign<br> - `blocked`: the key is blocked: it cannot be used to sign<br> - `revoked` the key is revoked: it will no longer be used to sign 
type KeyStatusEnum string

// List of KeyStatusEnum
const (
	KEYSTATUSENUM_ACTIVE KeyStatusEnum = "active"
	KEYSTATUSENUM_BLOCKED KeyStatusEnum = "blocked"
	KEYSTATUSENUM_REVOKED KeyStatusEnum = "revoked"
)

// All allowed values of KeyStatusEnum enum
var AllowedKeyStatusEnumEnumValues = []KeyStatusEnum{
	"active",
	"blocked",
	"revoked",
}

func (v *KeyStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyStatusEnum(value)
	for _, existing := range AllowedKeyStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyStatusEnum", value)
}

// NewKeyStatusEnumFromValue returns a pointer to a valid KeyStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyStatusEnumFromValue(v string) (*KeyStatusEnum, error) {
	ev := KeyStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyStatusEnum: valid values are %v", v, AllowedKeyStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyStatusEnum) IsValid() bool {
	for _, existing := range AllowedKeyStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyStatusEnum value
func (v KeyStatusEnum) Ptr() *KeyStatusEnum {
	return &v
}

type NullableKeyStatusEnum struct {
	value *KeyStatusEnum
	isSet bool
}

func (v NullableKeyStatusEnum) Get() *KeyStatusEnum {
	return v.value
}

func (v *NullableKeyStatusEnum) Set(val *KeyStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyStatusEnum(val *KeyStatusEnum) *NullableKeyStatusEnum {
	return &NullableKeyStatusEnum{value: val, isSet: true}
}

func (v NullableKeyStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

