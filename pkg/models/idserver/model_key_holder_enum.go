/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
	"fmt"
)

// KeyHolderEnum The type of entity holding the private key.<br> - `server`: the server (Woleet.ID Server or equivalent)<br> - `user`: the user (eg. by using a Ledger Nano S or Woleet.ID Mobile or equivalent) 
type KeyHolderEnum string

// List of KeyHolderEnum
const (
	KEYHOLDERENUM_SERVER KeyHolderEnum = "server"
	KEYHOLDERENUM_USER KeyHolderEnum = "user"
)

// All allowed values of KeyHolderEnum enum
var AllowedKeyHolderEnumEnumValues = []KeyHolderEnum{
	"server",
	"user",
}

func (v *KeyHolderEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyHolderEnum(value)
	for _, existing := range AllowedKeyHolderEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyHolderEnum", value)
}

// NewKeyHolderEnumFromValue returns a pointer to a valid KeyHolderEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyHolderEnumFromValue(v string) (*KeyHolderEnum, error) {
	ev := KeyHolderEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyHolderEnum: valid values are %v", v, AllowedKeyHolderEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyHolderEnum) IsValid() bool {
	for _, existing := range AllowedKeyHolderEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyHolderEnum value
func (v KeyHolderEnum) Ptr() *KeyHolderEnum {
	return &v
}

type NullableKeyHolderEnum struct {
	value *KeyHolderEnum
	isSet bool
}

func (v NullableKeyHolderEnum) Get() *KeyHolderEnum {
	return v.value
}

func (v *NullableKeyHolderEnum) Set(val *KeyHolderEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyHolderEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyHolderEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyHolderEnum(val *KeyHolderEnum) *NullableKeyHolderEnum {
	return &NullableKeyHolderEnum{value: val, isSet: true}
}

func (v NullableKeyHolderEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyHolderEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

