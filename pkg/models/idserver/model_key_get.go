/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
)

// KeyGet struct for KeyGet
type KeyGet struct {
	// Key name.
	Name string `json:"name"`
	// Key expiration date (Unix ms timestamp).<br> Note that the field is not returned if the key has no expiration date. 
	Expiration *int64 `json:"expiration,omitempty"`
	Status *KeyStatusEnum `json:"status,omitempty"`
	// Key identifier (allocated by the platform).
	Id *string `json:"id,omitempty"`
	// Public key (bitcoin address when using BIP39 keys).
	PubKey *string `json:"pubKey,omitempty"`
	Type *KeyTypeEnum `json:"type,omitempty"`
	Holder *KeyHolderEnum `json:"holder,omitempty"`
	Device *KeyDeviceEnum `json:"device,omitempty"`
	// Indicates whether the key has expired or not.<br> Note that the field is not returned if the key has not expired. 
	Expired *bool `json:"expired,omitempty"`
	// Key revocation date (Unix ms timestamp).<br> Note that the field is not returned if the key has no revocation date. 
	RevokedAt *int64 `json:"revokedAt,omitempty"`
	// Date of creation (Unix ms timestamp).
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// Date of last modification (Unix ms timestamp).
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
	// Date of last usage (Unix ms timestamp).
	LastUsed *int64 `json:"lastUsed,omitempty"`
}

// NewKeyGet instantiates a new KeyGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyGet(name string) *KeyGet {
	this := KeyGet{}
	this.Name = name
	var status KeyStatusEnum = KEYSTATUSENUM_ACTIVE
	this.Status = &status
	return &this
}

// NewKeyGetWithDefaults instantiates a new KeyGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyGetWithDefaults() *KeyGet {
	this := KeyGet{}
	var status KeyStatusEnum = KEYSTATUSENUM_ACTIVE
	this.Status = &status
	return &this
}

// GetName returns the Name field value
func (o *KeyGet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeyGet) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeyGet) SetName(v string) {
	o.Name = v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *KeyGet) GetExpiration() int64 {
	if o == nil || o.Expiration == nil {
		var ret int64
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetExpirationOk() (*int64, bool) {
	if o == nil || o.Expiration == nil {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *KeyGet) HasExpiration() bool {
	if o != nil && o.Expiration != nil {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given int64 and assigns it to the Expiration field.
func (o *KeyGet) SetExpiration(v int64) {
	o.Expiration = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KeyGet) GetStatus() KeyStatusEnum {
	if o == nil || o.Status == nil {
		var ret KeyStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetStatusOk() (*KeyStatusEnum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KeyGet) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given KeyStatusEnum and assigns it to the Status field.
func (o *KeyGet) SetStatus(v KeyStatusEnum) {
	o.Status = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyGet) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyGet) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyGet) SetId(v string) {
	o.Id = &v
}

// GetPubKey returns the PubKey field value if set, zero value otherwise.
func (o *KeyGet) GetPubKey() string {
	if o == nil || o.PubKey == nil {
		var ret string
		return ret
	}
	return *o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetPubKeyOk() (*string, bool) {
	if o == nil || o.PubKey == nil {
		return nil, false
	}
	return o.PubKey, true
}

// HasPubKey returns a boolean if a field has been set.
func (o *KeyGet) HasPubKey() bool {
	if o != nil && o.PubKey != nil {
		return true
	}

	return false
}

// SetPubKey gets a reference to the given string and assigns it to the PubKey field.
func (o *KeyGet) SetPubKey(v string) {
	o.PubKey = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeyGet) GetType() KeyTypeEnum {
	if o == nil || o.Type == nil {
		var ret KeyTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetTypeOk() (*KeyTypeEnum, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeyGet) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given KeyTypeEnum and assigns it to the Type field.
func (o *KeyGet) SetType(v KeyTypeEnum) {
	o.Type = &v
}

// GetHolder returns the Holder field value if set, zero value otherwise.
func (o *KeyGet) GetHolder() KeyHolderEnum {
	if o == nil || o.Holder == nil {
		var ret KeyHolderEnum
		return ret
	}
	return *o.Holder
}

// GetHolderOk returns a tuple with the Holder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetHolderOk() (*KeyHolderEnum, bool) {
	if o == nil || o.Holder == nil {
		return nil, false
	}
	return o.Holder, true
}

// HasHolder returns a boolean if a field has been set.
func (o *KeyGet) HasHolder() bool {
	if o != nil && o.Holder != nil {
		return true
	}

	return false
}

// SetHolder gets a reference to the given KeyHolderEnum and assigns it to the Holder field.
func (o *KeyGet) SetHolder(v KeyHolderEnum) {
	o.Holder = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *KeyGet) GetDevice() KeyDeviceEnum {
	if o == nil || o.Device == nil {
		var ret KeyDeviceEnum
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetDeviceOk() (*KeyDeviceEnum, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *KeyGet) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given KeyDeviceEnum and assigns it to the Device field.
func (o *KeyGet) SetDevice(v KeyDeviceEnum) {
	o.Device = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *KeyGet) GetExpired() bool {
	if o == nil || o.Expired == nil {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetExpiredOk() (*bool, bool) {
	if o == nil || o.Expired == nil {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *KeyGet) HasExpired() bool {
	if o != nil && o.Expired != nil {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *KeyGet) SetExpired(v bool) {
	o.Expired = &v
}

// GetRevokedAt returns the RevokedAt field value if set, zero value otherwise.
func (o *KeyGet) GetRevokedAt() int64 {
	if o == nil || o.RevokedAt == nil {
		var ret int64
		return ret
	}
	return *o.RevokedAt
}

// GetRevokedAtOk returns a tuple with the RevokedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetRevokedAtOk() (*int64, bool) {
	if o == nil || o.RevokedAt == nil {
		return nil, false
	}
	return o.RevokedAt, true
}

// HasRevokedAt returns a boolean if a field has been set.
func (o *KeyGet) HasRevokedAt() bool {
	if o != nil && o.RevokedAt != nil {
		return true
	}

	return false
}

// SetRevokedAt gets a reference to the given int64 and assigns it to the RevokedAt field.
func (o *KeyGet) SetRevokedAt(v int64) {
	o.RevokedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KeyGet) GetCreatedAt() int64 {
	if o == nil || o.CreatedAt == nil {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetCreatedAtOk() (*int64, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KeyGet) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *KeyGet) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *KeyGet) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *KeyGet) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *KeyGet) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *KeyGet) GetLastUsed() int64 {
	if o == nil || o.LastUsed == nil {
		var ret int64
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyGet) GetLastUsedOk() (*int64, bool) {
	if o == nil || o.LastUsed == nil {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *KeyGet) HasLastUsed() bool {
	if o != nil && o.LastUsed != nil {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given int64 and assigns it to the LastUsed field.
func (o *KeyGet) SetLastUsed(v int64) {
	o.LastUsed = &v
}

func (o KeyGet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Expiration != nil {
		toSerialize["expiration"] = o.Expiration
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PubKey != nil {
		toSerialize["pubKey"] = o.PubKey
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Holder != nil {
		toSerialize["holder"] = o.Holder
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.Expired != nil {
		toSerialize["expired"] = o.Expired
	}
	if o.RevokedAt != nil {
		toSerialize["revokedAt"] = o.RevokedAt
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.LastUsed != nil {
		toSerialize["lastUsed"] = o.LastUsed
	}
	return json.Marshal(toSerialize)
}

type NullableKeyGet struct {
	value *KeyGet
	isSet bool
}

func (v NullableKeyGet) Get() *KeyGet {
	return v.value
}

func (v *NullableKeyGet) Set(val *KeyGet) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyGet) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyGet(val *KeyGet) *NullableKeyGet {
	return &NullableKeyGet{value: val, isSet: true}
}

func (v NullableKeyGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


