/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
	"fmt"
)

// UserModeEnum User mode.<br> - `esign`: the user is a regular user, and his keys are used to create electronic signatures.<br> - `seal`: the user represents a legal entity, and his keys are used to create server seals. 
type UserModeEnum string

// List of UserModeEnum
const (
	USERMODEENUM_SEAL UserModeEnum = "seal"
	USERMODEENUM_ESIGN UserModeEnum = "esign"
)

// All allowed values of UserModeEnum enum
var AllowedUserModeEnumEnumValues = []UserModeEnum{
	"seal",
	"esign",
}

func (v *UserModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserModeEnum(value)
	for _, existing := range AllowedUserModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserModeEnum", value)
}

// NewUserModeEnumFromValue returns a pointer to a valid UserModeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserModeEnumFromValue(v string) (*UserModeEnum, error) {
	ev := UserModeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserModeEnum: valid values are %v", v, AllowedUserModeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserModeEnum) IsValid() bool {
	for _, existing := range AllowedUserModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserModeEnum value
func (v UserModeEnum) Ptr() *UserModeEnum {
	return &v
}

type NullableUserModeEnum struct {
	value *UserModeEnum
	isSet bool
}

func (v NullableUserModeEnum) Get() *UserModeEnum {
	return v.value
}

func (v *NullableUserModeEnum) Set(val *UserModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUserModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUserModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserModeEnum(val *UserModeEnum) *NullableUserModeEnum {
	return &NullableUserModeEnum{value: val, isSet: true}
}

func (v NullableUserModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

