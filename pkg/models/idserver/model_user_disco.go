/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
)

// UserDisco struct for UserDisco
type UserDisco struct {
	// User email (can be used for login).
	Email *string `json:"email,omitempty"`
	// User name (can be used for login).
	Username *string `json:"username,omitempty"`
	// User country calling code
	CountryCallingCode *string `json:"countryCallingCode,omitempty"`
	// User phone number
	Phone *string `json:"phone,omitempty"`
	Status *UserStatusEnum `json:"status,omitempty"`
	Role *UserRoleEnum `json:"role,omitempty"`
	Identity *FullIdentity `json:"identity,omitempty"`
	// User identifier (allocated by the server).
	Id *string `json:"id,omitempty"`
	// Date of creation (Unix ms timestamp).
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// Date of last modification (Unix ms timestamp).
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
	// Date of last login (Unix ms timestamp).
	LastLogin *int64 `json:"lastLogin,omitempty"`
	Mode *UserModeEnum `json:"mode,omitempty"`
	// Identifier of the default key to use to sign for this user (cannot be the an external key nor a e-signature key).
	DefaultKeyId *string `json:"defaultKeyId,omitempty"`
}

// NewUserDisco instantiates a new UserDisco object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDisco() *UserDisco {
	this := UserDisco{}
	var status UserStatusEnum = USERSTATUSENUM_ACTIVE
	this.Status = &status
	var role UserRoleEnum = USERROLEENUM_USER
	this.Role = &role
	var mode UserModeEnum = USERMODEENUM_SEAL
	this.Mode = &mode
	return &this
}

// NewUserDiscoWithDefaults instantiates a new UserDisco object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDiscoWithDefaults() *UserDisco {
	this := UserDisco{}
	var status UserStatusEnum = USERSTATUSENUM_ACTIVE
	this.Status = &status
	var role UserRoleEnum = USERROLEENUM_USER
	this.Role = &role
	var mode UserModeEnum = USERMODEENUM_SEAL
	this.Mode = &mode
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserDisco) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserDisco) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserDisco) SetEmail(v string) {
	o.Email = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserDisco) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserDisco) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserDisco) SetUsername(v string) {
	o.Username = &v
}

// GetCountryCallingCode returns the CountryCallingCode field value if set, zero value otherwise.
func (o *UserDisco) GetCountryCallingCode() string {
	if o == nil || o.CountryCallingCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCallingCode
}

// GetCountryCallingCodeOk returns a tuple with the CountryCallingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetCountryCallingCodeOk() (*string, bool) {
	if o == nil || o.CountryCallingCode == nil {
		return nil, false
	}
	return o.CountryCallingCode, true
}

// HasCountryCallingCode returns a boolean if a field has been set.
func (o *UserDisco) HasCountryCallingCode() bool {
	if o != nil && o.CountryCallingCode != nil {
		return true
	}

	return false
}

// SetCountryCallingCode gets a reference to the given string and assigns it to the CountryCallingCode field.
func (o *UserDisco) SetCountryCallingCode(v string) {
	o.CountryCallingCode = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *UserDisco) GetPhone() string {
	if o == nil || o.Phone == nil {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetPhoneOk() (*string, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *UserDisco) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *UserDisco) SetPhone(v string) {
	o.Phone = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserDisco) GetStatus() UserStatusEnum {
	if o == nil || o.Status == nil {
		var ret UserStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetStatusOk() (*UserStatusEnum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserDisco) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given UserStatusEnum and assigns it to the Status field.
func (o *UserDisco) SetStatus(v UserStatusEnum) {
	o.Status = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UserDisco) GetRole() UserRoleEnum {
	if o == nil || o.Role == nil {
		var ret UserRoleEnum
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetRoleOk() (*UserRoleEnum, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UserDisco) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given UserRoleEnum and assigns it to the Role field.
func (o *UserDisco) SetRole(v UserRoleEnum) {
	o.Role = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *UserDisco) GetIdentity() FullIdentity {
	if o == nil || o.Identity == nil {
		var ret FullIdentity
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetIdentityOk() (*FullIdentity, bool) {
	if o == nil || o.Identity == nil {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *UserDisco) HasIdentity() bool {
	if o != nil && o.Identity != nil {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given FullIdentity and assigns it to the Identity field.
func (o *UserDisco) SetIdentity(v FullIdentity) {
	o.Identity = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDisco) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDisco) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserDisco) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *UserDisco) GetCreatedAt() int64 {
	if o == nil || o.CreatedAt == nil {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetCreatedAtOk() (*int64, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *UserDisco) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *UserDisco) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserDisco) GetUpdatedAt() int64 {
	if o == nil || o.UpdatedAt == nil {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserDisco) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *UserDisco) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *UserDisco) GetLastLogin() int64 {
	if o == nil || o.LastLogin == nil {
		var ret int64
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetLastLoginOk() (*int64, bool) {
	if o == nil || o.LastLogin == nil {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *UserDisco) HasLastLogin() bool {
	if o != nil && o.LastLogin != nil {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given int64 and assigns it to the LastLogin field.
func (o *UserDisco) SetLastLogin(v int64) {
	o.LastLogin = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *UserDisco) GetMode() UserModeEnum {
	if o == nil || o.Mode == nil {
		var ret UserModeEnum
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetModeOk() (*UserModeEnum, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *UserDisco) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given UserModeEnum and assigns it to the Mode field.
func (o *UserDisco) SetMode(v UserModeEnum) {
	o.Mode = &v
}

// GetDefaultKeyId returns the DefaultKeyId field value if set, zero value otherwise.
func (o *UserDisco) GetDefaultKeyId() string {
	if o == nil || o.DefaultKeyId == nil {
		var ret string
		return ret
	}
	return *o.DefaultKeyId
}

// GetDefaultKeyIdOk returns a tuple with the DefaultKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDisco) GetDefaultKeyIdOk() (*string, bool) {
	if o == nil || o.DefaultKeyId == nil {
		return nil, false
	}
	return o.DefaultKeyId, true
}

// HasDefaultKeyId returns a boolean if a field has been set.
func (o *UserDisco) HasDefaultKeyId() bool {
	if o != nil && o.DefaultKeyId != nil {
		return true
	}

	return false
}

// SetDefaultKeyId gets a reference to the given string and assigns it to the DefaultKeyId field.
func (o *UserDisco) SetDefaultKeyId(v string) {
	o.DefaultKeyId = &v
}

func (o UserDisco) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.CountryCallingCode != nil {
		toSerialize["countryCallingCode"] = o.CountryCallingCode
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Identity != nil {
		toSerialize["identity"] = o.Identity
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.LastLogin != nil {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.DefaultKeyId != nil {
		toSerialize["defaultKeyId"] = o.DefaultKeyId
	}
	return json.Marshal(toSerialize)
}

type NullableUserDisco struct {
	value *UserDisco
	isSet bool
}

func (v NullableUserDisco) Get() *UserDisco {
	return v.value
}

func (v *NullableUserDisco) Set(val *UserDisco) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDisco) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDisco) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDisco(val *UserDisco) *NullableUserDisco {
	return &NullableUserDisco{value: val, isSet: true}
}

func (v NullableUserDisco) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDisco) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


