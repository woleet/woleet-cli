/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
	"fmt"
)

// UserRoleEnum User role.<br> - `user`: a user can sign using his keys<br> - `manager`: a manager can manage user and seal identities and keys<br> - `admin`: an administrator can do everything on the server 
type UserRoleEnum string

// List of UserRoleEnum
const (
	USERROLEENUM_USER UserRoleEnum = "user"
	USERROLEENUM_MANAGER UserRoleEnum = "manager"
	USERROLEENUM_ADMIN UserRoleEnum = "admin"
)

// All allowed values of UserRoleEnum enum
var AllowedUserRoleEnumEnumValues = []UserRoleEnum{
	"user",
	"manager",
	"admin",
}

func (v *UserRoleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserRoleEnum(value)
	for _, existing := range AllowedUserRoleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserRoleEnum", value)
}

// NewUserRoleEnumFromValue returns a pointer to a valid UserRoleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserRoleEnumFromValue(v string) (*UserRoleEnum, error) {
	ev := UserRoleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserRoleEnum: valid values are %v", v, AllowedUserRoleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserRoleEnum) IsValid() bool {
	for _, existing := range AllowedUserRoleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserRoleEnum value
func (v UserRoleEnum) Ptr() *UserRoleEnum {
	return &v
}

type NullableUserRoleEnum struct {
	value *UserRoleEnum
	isSet bool
}

func (v NullableUserRoleEnum) Get() *UserRoleEnum {
	return v.value
}

func (v *NullableUserRoleEnum) Set(val *UserRoleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRoleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRoleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRoleEnum(val *UserRoleEnum) *NullableUserRoleEnum {
	return &NullableUserRoleEnum{value: val, isSet: true}
}

func (v NullableUserRoleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRoleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

