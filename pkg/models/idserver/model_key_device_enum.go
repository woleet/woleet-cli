/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
	"fmt"
)

// KeyDeviceEnum The type of device storing the key.<br> - `server`: Woleet.ID Server or equivalent<br> - `mobile`: Woleet.ID Mobile or equivalent<br> - `nano`: Ledger Nano S or equivalent 
type KeyDeviceEnum string

// List of KeyDeviceEnum
const (
	KEYDEVICEENUM_SERVER KeyDeviceEnum = "server"
	KEYDEVICEENUM_MOBILE KeyDeviceEnum = "mobile"
	KEYDEVICEENUM_NANO KeyDeviceEnum = "nano"
)

// All allowed values of KeyDeviceEnum enum
var AllowedKeyDeviceEnumEnumValues = []KeyDeviceEnum{
	"server",
	"mobile",
	"nano",
}

func (v *KeyDeviceEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyDeviceEnum(value)
	for _, existing := range AllowedKeyDeviceEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyDeviceEnum", value)
}

// NewKeyDeviceEnumFromValue returns a pointer to a valid KeyDeviceEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyDeviceEnumFromValue(v string) (*KeyDeviceEnum, error) {
	ev := KeyDeviceEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyDeviceEnum: valid values are %v", v, AllowedKeyDeviceEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyDeviceEnum) IsValid() bool {
	for _, existing := range AllowedKeyDeviceEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KeyDeviceEnum value
func (v KeyDeviceEnum) Ptr() *KeyDeviceEnum {
	return &v
}

type NullableKeyDeviceEnum struct {
	value *KeyDeviceEnum
	isSet bool
}

func (v NullableKeyDeviceEnum) Get() *KeyDeviceEnum {
	return v.value
}

func (v *NullableKeyDeviceEnum) Set(val *KeyDeviceEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyDeviceEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyDeviceEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyDeviceEnum(val *KeyDeviceEnum) *NullableKeyDeviceEnum {
	return &NullableKeyDeviceEnum{value: val, isSet: true}
}

func (v NullableKeyDeviceEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyDeviceEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

