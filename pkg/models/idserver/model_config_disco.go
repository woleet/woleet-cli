/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
)

// ConfigDisco struct for ConfigDisco
type ConfigDisco struct {
	// Public URL of the **Identity endpoint** (ie. the URL that anyone can use to get the identity associated to a public key). 
	IdentityURL *string `json:"identityURL,omitempty"`
	// Public base URL of **Signature endpoints** (ie. the base URL that authorized users can use to sign and to discover other users). 
	SignatureURL *string `json:"signatureURL,omitempty"`
	// Public base URL of **API endpoints** (ie. the base URL that authorized users can use to call the server API). 
	APIURL *string `json:"APIURL,omitempty"`
	// API version number of this Woleet.ID Server instance (extraced from the swagger file). 
	APIVersion *string `json:"APIVersion,omitempty"`
}

// NewConfigDisco instantiates a new ConfigDisco object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigDisco() *ConfigDisco {
	this := ConfigDisco{}
	return &this
}

// NewConfigDiscoWithDefaults instantiates a new ConfigDisco object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigDiscoWithDefaults() *ConfigDisco {
	this := ConfigDisco{}
	return &this
}

// GetIdentityURL returns the IdentityURL field value if set, zero value otherwise.
func (o *ConfigDisco) GetIdentityURL() string {
	if o == nil || o.IdentityURL == nil {
		var ret string
		return ret
	}
	return *o.IdentityURL
}

// GetIdentityURLOk returns a tuple with the IdentityURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigDisco) GetIdentityURLOk() (*string, bool) {
	if o == nil || o.IdentityURL == nil {
		return nil, false
	}
	return o.IdentityURL, true
}

// HasIdentityURL returns a boolean if a field has been set.
func (o *ConfigDisco) HasIdentityURL() bool {
	if o != nil && o.IdentityURL != nil {
		return true
	}

	return false
}

// SetIdentityURL gets a reference to the given string and assigns it to the IdentityURL field.
func (o *ConfigDisco) SetIdentityURL(v string) {
	o.IdentityURL = &v
}

// GetSignatureURL returns the SignatureURL field value if set, zero value otherwise.
func (o *ConfigDisco) GetSignatureURL() string {
	if o == nil || o.SignatureURL == nil {
		var ret string
		return ret
	}
	return *o.SignatureURL
}

// GetSignatureURLOk returns a tuple with the SignatureURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigDisco) GetSignatureURLOk() (*string, bool) {
	if o == nil || o.SignatureURL == nil {
		return nil, false
	}
	return o.SignatureURL, true
}

// HasSignatureURL returns a boolean if a field has been set.
func (o *ConfigDisco) HasSignatureURL() bool {
	if o != nil && o.SignatureURL != nil {
		return true
	}

	return false
}

// SetSignatureURL gets a reference to the given string and assigns it to the SignatureURL field.
func (o *ConfigDisco) SetSignatureURL(v string) {
	o.SignatureURL = &v
}

// GetAPIURL returns the APIURL field value if set, zero value otherwise.
func (o *ConfigDisco) GetAPIURL() string {
	if o == nil || o.APIURL == nil {
		var ret string
		return ret
	}
	return *o.APIURL
}

// GetAPIURLOk returns a tuple with the APIURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigDisco) GetAPIURLOk() (*string, bool) {
	if o == nil || o.APIURL == nil {
		return nil, false
	}
	return o.APIURL, true
}

// HasAPIURL returns a boolean if a field has been set.
func (o *ConfigDisco) HasAPIURL() bool {
	if o != nil && o.APIURL != nil {
		return true
	}

	return false
}

// SetAPIURL gets a reference to the given string and assigns it to the APIURL field.
func (o *ConfigDisco) SetAPIURL(v string) {
	o.APIURL = &v
}

// GetAPIVersion returns the APIVersion field value if set, zero value otherwise.
func (o *ConfigDisco) GetAPIVersion() string {
	if o == nil || o.APIVersion == nil {
		var ret string
		return ret
	}
	return *o.APIVersion
}

// GetAPIVersionOk returns a tuple with the APIVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigDisco) GetAPIVersionOk() (*string, bool) {
	if o == nil || o.APIVersion == nil {
		return nil, false
	}
	return o.APIVersion, true
}

// HasAPIVersion returns a boolean if a field has been set.
func (o *ConfigDisco) HasAPIVersion() bool {
	if o != nil && o.APIVersion != nil {
		return true
	}

	return false
}

// SetAPIVersion gets a reference to the given string and assigns it to the APIVersion field.
func (o *ConfigDisco) SetAPIVersion(v string) {
	o.APIVersion = &v
}

func (o ConfigDisco) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IdentityURL != nil {
		toSerialize["identityURL"] = o.IdentityURL
	}
	if o.SignatureURL != nil {
		toSerialize["signatureURL"] = o.SignatureURL
	}
	if o.APIURL != nil {
		toSerialize["APIURL"] = o.APIURL
	}
	if o.APIVersion != nil {
		toSerialize["APIVersion"] = o.APIVersion
	}
	return json.Marshal(toSerialize)
}

type NullableConfigDisco struct {
	value *ConfigDisco
	isSet bool
}

func (v NullableConfigDisco) Get() *ConfigDisco {
	return v.value
}

func (v *NullableConfigDisco) Set(val *ConfigDisco) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigDisco) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigDisco) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigDisco(val *ConfigDisco) *NullableConfigDisco {
	return &NullableConfigDisco{value: val, isSet: true}
}

func (v NullableConfigDisco) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigDisco) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


