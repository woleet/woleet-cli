/*
Woleet.ID Server

This is Woleet.ID Server API documentation.

API version: 1.2.8
Contact: contact@woleet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idserver

import (
	"encoding/json"
)

// FullIdentity struct for FullIdentity
type FullIdentity struct {
	// Common name (CN) (2.5.4.3)
	CommonName string `json:"commonName"`
	// Organization name (O) (2.5.4.10)
	Organization *string `json:"organization,omitempty"`
	// Organizational unit name (OU) (2.5.4.11)
	OrganizationalUnit *string `json:"organizationalUnit,omitempty"`
	// Locality name (L) (2.5.4.7)
	Locality *string `json:"locality,omitempty"`
	// Country code (C) (2.5.4.6)
	Country *string `json:"country,omitempty"`
	// Email address.
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Custom user identifier (UID) (0.9.2342.19200300.100.1.1) must be unique for each user.
	UserId *string `json:"userId,omitempty"`
}

// NewFullIdentity instantiates a new FullIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullIdentity(commonName string) *FullIdentity {
	this := FullIdentity{}
	this.CommonName = commonName
	return &this
}

// NewFullIdentityWithDefaults instantiates a new FullIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullIdentityWithDefaults() *FullIdentity {
	this := FullIdentity{}
	return &this
}

// GetCommonName returns the CommonName field value
func (o *FullIdentity) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *FullIdentity) GetCommonNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *FullIdentity) SetCommonName(v string) {
	o.CommonName = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *FullIdentity) GetOrganization() string {
	if o == nil || o.Organization == nil {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullIdentity) GetOrganizationOk() (*string, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *FullIdentity) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *FullIdentity) SetOrganization(v string) {
	o.Organization = &v
}

// GetOrganizationalUnit returns the OrganizationalUnit field value if set, zero value otherwise.
func (o *FullIdentity) GetOrganizationalUnit() string {
	if o == nil || o.OrganizationalUnit == nil {
		var ret string
		return ret
	}
	return *o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullIdentity) GetOrganizationalUnitOk() (*string, bool) {
	if o == nil || o.OrganizationalUnit == nil {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// HasOrganizationalUnit returns a boolean if a field has been set.
func (o *FullIdentity) HasOrganizationalUnit() bool {
	if o != nil && o.OrganizationalUnit != nil {
		return true
	}

	return false
}

// SetOrganizationalUnit gets a reference to the given string and assigns it to the OrganizationalUnit field.
func (o *FullIdentity) SetOrganizationalUnit(v string) {
	o.OrganizationalUnit = &v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *FullIdentity) GetLocality() string {
	if o == nil || o.Locality == nil {
		var ret string
		return ret
	}
	return *o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullIdentity) GetLocalityOk() (*string, bool) {
	if o == nil || o.Locality == nil {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *FullIdentity) HasLocality() bool {
	if o != nil && o.Locality != nil {
		return true
	}

	return false
}

// SetLocality gets a reference to the given string and assigns it to the Locality field.
func (o *FullIdentity) SetLocality(v string) {
	o.Locality = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *FullIdentity) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullIdentity) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *FullIdentity) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *FullIdentity) SetCountry(v string) {
	o.Country = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *FullIdentity) GetEmailAddress() string {
	if o == nil || o.EmailAddress == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullIdentity) GetEmailAddressOk() (*string, bool) {
	if o == nil || o.EmailAddress == nil {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *FullIdentity) HasEmailAddress() bool {
	if o != nil && o.EmailAddress != nil {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *FullIdentity) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FullIdentity) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullIdentity) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FullIdentity) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *FullIdentity) SetUserId(v string) {
	o.UserId = &v
}

func (o FullIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["commonName"] = o.CommonName
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.OrganizationalUnit != nil {
		toSerialize["organizationalUnit"] = o.OrganizationalUnit
	}
	if o.Locality != nil {
		toSerialize["locality"] = o.Locality
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.EmailAddress != nil {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableFullIdentity struct {
	value *FullIdentity
	isSet bool
}

func (v NullableFullIdentity) Get() *FullIdentity {
	return v.value
}

func (v *NullableFullIdentity) Set(val *FullIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableFullIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableFullIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullIdentity(val *FullIdentity) *NullableFullIdentity {
	return &NullableFullIdentity{value: val, isSet: true}
}

func (v NullableFullIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


